/************************************************************
  ONLY FOR TESTING
************************************************************/
*[data-tool] {
  color: var(--theme) !important; }

/************************************************************
  GENERAL
************************************************************/
:root {
  --theme: #009688;
  --themeAlt: #F44336;
  --themeText: #ffffff;
  --text: #223254;
  --fontSize: 16px;
  --fontFamily: "Open Sans", sans-serif;
  --border: #d0d0d0;
  --borderDark: #a0a0a0;
  --borderLight: #ececec;
  --base: #F5F5F5;
  --baseLight: #ffffff;
  --baseDark: #333333;
  --shadow: rgba(0, 0, 0, 0.2);
  --highlight: rgba(255, 255, 255, 0.2);
  --shadowDark: rgba(0, 0, 0, 0.8);
  --highlightLight: rgba(255, 255, 255, 0.8);
  --header: #009688;
  --headerAlt: #108176;
  --headerText: #ffffff;
  --headerWidth: 280px;
  --headerHeight: 70px;
  --footer: #009688;
  --footerText: #ffffff;
  --footerHeight: 300px;
  --error: #F44336;
  --success: #8BC34A;
  --warning: #ffffff;
  --notification: #F44336;
  --white: #ffffff;
  --black: #000000;
  --scrollbarThumb: rgba(255, 255, 255, 0.33);
  --scrollbarActive: rgba(255, 255, 255, 0.6);
  --scrollbarTrack: inherit;
  --scrollbarWidth: 8px; }

body {
  font-size: 13.333px;
  font-weight: lighter;
  margin: 0;
  padding: 0;
  font-family: var(--fontFamily);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New", monospace; }

::-webkit-scrollbar {
  width: var(--scrollbarWidth);
  height: var(--scrollbarWidth); }

::-webkit-scrollbar-track {
  background-color: var(--scrollbarTrack); }

::-webkit-scrollbar-thumb {
  border-radius: 1px;
  background-color: var(--scrollbarThumb); }

::-webkit-scrollbar-thumb:hover {
  background-color: var(--scrollbarActive); }

wp-header {
  z-index: 1; }

wp-box, wp-image, wp-text-section {
  display: block; }

* {
  outline: none; }

wp-scroll-up, wp-scroll-down {
  position: absolute;
  right: calc(50% - 20px);
  width: 40px;
  height: 40px;
  background-color: var(--base);
  border-radius: 50%;
  opacity: 0.3;
  box-shadow: 0 0 5px var(--shadow);
  transition: .2s opacity ease; }
  wp-scroll-up:hover, wp-scroll-down:hover {
    opacity: 1; }

wp-scroll-up {
  top: 2px; }

wp-scroll-down {
  bottom: 2px; }

/************************************************************
  IMPORT PLUGINS
************************************************************/
.fontAwesome, wp-icon, wp-dialogue-close {
  font-family: 'Font Awesome\ 5 Free';
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  font-style: normal;
  font-variant: normal;
  text-rendering: auto;
  line-height: 1;
  font-weight: 900; }
  .fontAwesome.brands, wp-icon.brands, wp-dialogue-close.brands {
    font-family: 'Font Awesome\ 5 Brands';
    font-weight: 900; }
  .fontAwesome.light, wp-icon.light, wp-dialogue-close.light {
    font-weight: 400; }
  .fontAwesome.regular, wp-icon.regular, wp-dialogue-close.regular {
    font-weight: 500; }
  .fontAwesome.solid, wp-icon.solid, wp-dialogue-close.solid {
    font-weight: 900; }

/************************************************************
  TRIGGERS
************************************************************/
.disableAnimations, .disableAnimations * {
  animation-duration: 0s !important;
  transition-duration: 0s !important; }

.animate, .tt, .tta, .ttd, .animateChildren > * {
  animation-duration: .3s;
  animation-fill-mode: forwards; }

.transition, .tt, .tta, .ttd, .transitionChildren > * {
  transition-duration: .3s; }

.animateSlow, .animateSlowChildren > * {
  animation-duration: 1s;
  animation-fill-mode: forwards; }

.transitionSlow, .transitionSlowChildren > * {
  transition-duration: 1s; }

.inactiveUser, .inactiveUser * {
  cursor: none !important; }

/************************************************************
  CUSTOM/COMBO MODIFIER
************************************************************/
@keyframes dontAnimate {}/************************************************************
  VISIBILITY MODIFIER
************************************************************/
.inactiveUser.tt.fadeIn, .inactiveUser:not(.tt) > .tt.fadeIn, .inactiveUser:not(.tt) .ttd.fadeIn, .inactiveUser ~ .tta.fadeIn,
.trH.tt.fadeIn:not(:hover), .trH:not(:hover):not(.tt) > .tt.fadeIn, .trH:not(:hover):not(.tt) .ttd.fadeIn, .trH:not(:hover) ~ .tta.fadeIn,
.trF.tt.fadeIn:not(:focus), .trF:not(:focus):not(.tt) > .tt.fadeIn, .trF:not(:focus):not(.tt) .ttd.fadeIn, .trF:not(:focus) ~ .tta.fadeIn,
.trFW.tt.fadeIn:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.fadeIn, .trFW:not(:focus-within):not(.tt) .ttd.fadeIn, .trFW:not(:focus-within) ~ .tta.fadeIn,
.trA.tt.fadeIn:not(.active), .trA:not(.active):not(.tt) > .tt.fadeIn, .trA:not(.active):not(.tt) .ttd.fadeIn, .trA:not(.active) ~ .tta.fadeIn, .fadeOut:not(.tt):not(.tta),
.trH.tt.fadeOut:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.fadeOut, .trH:not(.inactiveUser):hover:not(.tt) .ttd.fadeOut, .trH:not(.inactiveUser):hover ~ .tta.fadeOut,
.trF.tt.fadeOut:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.fadeOut, .trF:not(.inactiveUser):focus:not(.tt) .ttd.fadeOut, .trF:not(.inactiveUser):focus ~ .tta.fadeOut,
.trFW.tt.fadeOut:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.fadeOut, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.fadeOut, .trFW:not(.inactiveUser):focus-within ~ .tta.fadeOut,
.trA.active.tt.fadeOut:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.fadeOut, .trA:not(.inactiveUser).active:not(.tt) .ttd.fadeOut, .trA:not(.inactiveUser).active ~ .tta.fadeOut {
  opacity: 0; }

.fadeIn:not(.tt):not(.tta),
.trH.tt.fadeIn:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.fadeIn, .trH:not(.inactiveUser):hover:not(.tt) .ttd.fadeIn, .trH:not(.inactiveUser):hover ~ .tta.fadeIn,
.trF.tt.fadeIn:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.fadeIn, .trF:not(.inactiveUser):focus:not(.tt) .ttd.fadeIn, .trF:not(.inactiveUser):focus ~ .tta.fadeIn,
.trFW.tt.fadeIn:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.fadeIn, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.fadeIn, .trFW:not(.inactiveUser):focus-within ~ .tta.fadeIn,
.trA.active.tt.fadeIn:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.fadeIn, .trA:not(.inactiveUser).active:not(.tt) .ttd.fadeIn, .trA:not(.inactiveUser).active ~ .tta.fadeIn, .inactiveUser.tt.fadeOut, .inactiveUser:not(.tt) > .tt.fadeOut, .inactiveUser:not(.tt) .ttd.fadeOut, .inactiveUser ~ .tta.fadeOut,
.trH.tt.fadeOut:not(:hover), .trH:not(:hover):not(.tt) > .tt.fadeOut, .trH:not(:hover):not(.tt) .ttd.fadeOut, .trH:not(:hover) ~ .tta.fadeOut,
.trF.tt.fadeOut:not(:focus), .trF:not(:focus):not(.tt) > .tt.fadeOut, .trF:not(:focus):not(.tt) .ttd.fadeOut, .trF:not(:focus) ~ .tta.fadeOut,
.trFW.tt.fadeOut:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.fadeOut, .trFW:not(:focus-within):not(.tt) .ttd.fadeOut, .trFW:not(:focus-within) ~ .tta.fadeOut,
.trA.tt.fadeOut:not(.active), .trA:not(.active):not(.tt) > .tt.fadeOut, .trA:not(.active):not(.tt) .ttd.fadeOut, .trA:not(.active) ~ .tta.fadeOut {
  opacity: 1; }

/************************************************************
  SIZE MODIFIER
************************************************************/
.inactiveUser.tt.scaleInY, .inactiveUser:not(.tt) > .tt.scaleInY, .inactiveUser:not(.tt) .ttd.scaleInY, .inactiveUser ~ .tta.scaleInY,
.trH.tt.scaleInY:not(:hover), .trH:not(:hover):not(.tt) > .tt.scaleInY, .trH:not(:hover):not(.tt) .ttd.scaleInY, .trH:not(:hover) ~ .tta.scaleInY,
.trF.tt.scaleInY:not(:focus), .trF:not(:focus):not(.tt) > .tt.scaleInY, .trF:not(:focus):not(.tt) .ttd.scaleInY, .trF:not(:focus) ~ .tta.scaleInY,
.trFW.tt.scaleInY:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.scaleInY, .trFW:not(:focus-within):not(.tt) .ttd.scaleInY, .trFW:not(:focus-within) ~ .tta.scaleInY,
.trA.tt.scaleInY:not(.active), .trA:not(.active):not(.tt) > .tt.scaleInY, .trA:not(.active):not(.tt) .ttd.scaleInY, .trA:not(.active) ~ .tta.scaleInY, .scaleOutY:not(.tt):not(.tta),
.trH.tt.scaleOutY:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.scaleOutY, .trH:not(.inactiveUser):hover:not(.tt) .ttd.scaleOutY, .trH:not(.inactiveUser):hover ~ .tta.scaleOutY,
.trF.tt.scaleOutY:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.scaleOutY, .trF:not(.inactiveUser):focus:not(.tt) .ttd.scaleOutY, .trF:not(.inactiveUser):focus ~ .tta.scaleOutY,
.trFW.tt.scaleOutY:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.scaleOutY, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.scaleOutY, .trFW:not(.inactiveUser):focus-within ~ .tta.scaleOutY,
.trA.active.tt.scaleOutY:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.scaleOutY, .trA:not(.inactiveUser).active:not(.tt) .ttd.scaleOutY, .trA:not(.inactiveUser).active ~ .tta.scaleOutY {
  transform: scaleY(1) translate3d(0, 0, 0);
  backface-visibility: hidden; }

.scaleInY:not(.tt):not(.tta),
.trH.tt.scaleInY:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.scaleInY, .trH:not(.inactiveUser):hover:not(.tt) .ttd.scaleInY, .trH:not(.inactiveUser):hover ~ .tta.scaleInY,
.trF.tt.scaleInY:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.scaleInY, .trF:not(.inactiveUser):focus:not(.tt) .ttd.scaleInY, .trF:not(.inactiveUser):focus ~ .tta.scaleInY,
.trFW.tt.scaleInY:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.scaleInY, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.scaleInY, .trFW:not(.inactiveUser):focus-within ~ .tta.scaleInY,
.trA.active.tt.scaleInY:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.scaleInY, .trA:not(.inactiveUser).active:not(.tt) .ttd.scaleInY, .trA:not(.inactiveUser).active ~ .tta.scaleInY, .inactiveUser.tt.scaleOutY, .inactiveUser:not(.tt) > .tt.scaleOutY, .inactiveUser:not(.tt) .ttd.scaleOutY, .inactiveUser ~ .tta.scaleOutY,
.trH.tt.scaleOutY:not(:hover), .trH:not(:hover):not(.tt) > .tt.scaleOutY, .trH:not(:hover):not(.tt) .ttd.scaleOutY, .trH:not(:hover) ~ .tta.scaleOutY,
.trF.tt.scaleOutY:not(:focus), .trF:not(:focus):not(.tt) > .tt.scaleOutY, .trF:not(:focus):not(.tt) .ttd.scaleOutY, .trF:not(:focus) ~ .tta.scaleOutY,
.trFW.tt.scaleOutY:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.scaleOutY, .trFW:not(:focus-within):not(.tt) .ttd.scaleOutY, .trFW:not(:focus-within) ~ .tta.scaleOutY,
.trA.tt.scaleOutY:not(.active), .trA:not(.active):not(.tt) > .tt.scaleOutY, .trA:not(.active):not(.tt) .ttd.scaleOutY, .trA:not(.active) ~ .tta.scaleOutY {
  transform: scaleY(0) translate3d(0, 0, 0);
  backface-visibility: hidden; }

.inactiveUser.tt.scaleInX, .inactiveUser:not(.tt) > .tt.scaleInX, .inactiveUser:not(.tt) .ttd.scaleInX, .inactiveUser ~ .tta.scaleInX,
.trH.tt.scaleInX:not(:hover), .trH:not(:hover):not(.tt) > .tt.scaleInX, .trH:not(:hover):not(.tt) .ttd.scaleInX, .trH:not(:hover) ~ .tta.scaleInX,
.trF.tt.scaleInX:not(:focus), .trF:not(:focus):not(.tt) > .tt.scaleInX, .trF:not(:focus):not(.tt) .ttd.scaleInX, .trF:not(:focus) ~ .tta.scaleInX,
.trFW.tt.scaleInX:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.scaleInX, .trFW:not(:focus-within):not(.tt) .ttd.scaleInX, .trFW:not(:focus-within) ~ .tta.scaleInX,
.trA.tt.scaleInX:not(.active), .trA:not(.active):not(.tt) > .tt.scaleInX, .trA:not(.active):not(.tt) .ttd.scaleInX, .trA:not(.active) ~ .tta.scaleInX, .scaleOutX:not(.tt):not(.tta),
.trH.tt.scaleOutX:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.scaleOutX, .trH:not(.inactiveUser):hover:not(.tt) .ttd.scaleOutX, .trH:not(.inactiveUser):hover ~ .tta.scaleOutX,
.trF.tt.scaleOutX:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.scaleOutX, .trF:not(.inactiveUser):focus:not(.tt) .ttd.scaleOutX, .trF:not(.inactiveUser):focus ~ .tta.scaleOutX,
.trFW.tt.scaleOutX:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.scaleOutX, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.scaleOutX, .trFW:not(.inactiveUser):focus-within ~ .tta.scaleOutX,
.trA.active.tt.scaleOutX:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.scaleOutX, .trA:not(.inactiveUser).active:not(.tt) .ttd.scaleOutX, .trA:not(.inactiveUser).active ~ .tta.scaleOutX {
  transform: scaleX(1) translate3d(0, 0, 0);
  backface-visibility: hidden; }

.scaleInX:not(.tt):not(.tta),
.trH.tt.scaleInX:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.scaleInX, .trH:not(.inactiveUser):hover:not(.tt) .ttd.scaleInX, .trH:not(.inactiveUser):hover ~ .tta.scaleInX,
.trF.tt.scaleInX:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.scaleInX, .trF:not(.inactiveUser):focus:not(.tt) .ttd.scaleInX, .trF:not(.inactiveUser):focus ~ .tta.scaleInX,
.trFW.tt.scaleInX:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.scaleInX, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.scaleInX, .trFW:not(.inactiveUser):focus-within ~ .tta.scaleInX,
.trA.active.tt.scaleInX:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.scaleInX, .trA:not(.inactiveUser).active:not(.tt) .ttd.scaleInX, .trA:not(.inactiveUser).active ~ .tta.scaleInX, .inactiveUser.tt.scaleOutX, .inactiveUser:not(.tt) > .tt.scaleOutX, .inactiveUser:not(.tt) .ttd.scaleOutX, .inactiveUser ~ .tta.scaleOutX,
.trH.tt.scaleOutX:not(:hover), .trH:not(:hover):not(.tt) > .tt.scaleOutX, .trH:not(:hover):not(.tt) .ttd.scaleOutX, .trH:not(:hover) ~ .tta.scaleOutX,
.trF.tt.scaleOutX:not(:focus), .trF:not(:focus):not(.tt) > .tt.scaleOutX, .trF:not(:focus):not(.tt) .ttd.scaleOutX, .trF:not(:focus) ~ .tta.scaleOutX,
.trFW.tt.scaleOutX:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.scaleOutX, .trFW:not(:focus-within):not(.tt) .ttd.scaleOutX, .trFW:not(:focus-within) ~ .tta.scaleOutX,
.trA.tt.scaleOutX:not(.active), .trA:not(.active):not(.tt) > .tt.scaleOutX, .trA:not(.active):not(.tt) .ttd.scaleOutX, .trA:not(.active) ~ .tta.scaleOutX {
  transform: scaleX(0) translate3d(0, 0, 0);
  backface-visibility: hidden; }

.inactiveUser.tt.scale10percent, .inactiveUser:not(.tt) > .tt.scale10percent, .inactiveUser:not(.tt) .ttd.scale10percent, .inactiveUser ~ .tta.scale10percent,
.trH.tt.scale10percent:not(:hover), .trH:not(:hover):not(.tt) > .tt.scale10percent, .trH:not(:hover):not(.tt) .ttd.scale10percent, .trH:not(:hover) ~ .tta.scale10percent,
.trF.tt.scale10percent:not(:focus), .trF:not(:focus):not(.tt) > .tt.scale10percent, .trF:not(:focus):not(.tt) .ttd.scale10percent, .trF:not(:focus) ~ .tta.scale10percent,
.trFW.tt.scale10percent:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.scale10percent, .trFW:not(:focus-within):not(.tt) .ttd.scale10percent, .trFW:not(:focus-within) ~ .tta.scale10percent,
.trA.tt.scale10percent:not(.active), .trA:not(.active):not(.tt) > .tt.scale10percent, .trA:not(.active):not(.tt) .ttd.scale10percent, .trA:not(.active) ~ .tta.scale10percent, .inactiveUser.tt.scaleIn, .inactiveUser:not(.tt) > .tt.scaleIn, .inactiveUser:not(.tt) .ttd.scaleIn, .inactiveUser ~ .tta.scaleIn,
.trH.tt.scaleIn:not(:hover), .trH:not(:hover):not(.tt) > .tt.scaleIn, .trH:not(:hover):not(.tt) .ttd.scaleIn, .trH:not(:hover) ~ .tta.scaleIn,
.trF.tt.scaleIn:not(:focus), .trF:not(:focus):not(.tt) > .tt.scaleIn, .trF:not(:focus):not(.tt) .ttd.scaleIn, .trF:not(:focus) ~ .tta.scaleIn,
.trFW.tt.scaleIn:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.scaleIn, .trFW:not(:focus-within):not(.tt) .ttd.scaleIn, .trFW:not(:focus-within) ~ .tta.scaleIn,
.trA.tt.scaleIn:not(.active), .trA:not(.active):not(.tt) > .tt.scaleIn, .trA:not(.active):not(.tt) .ttd.scaleIn, .trA:not(.active) ~ .tta.scaleIn, .scaleOut:not(.tt):not(.tta),
.trH.tt.scaleOut:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.scaleOut, .trH:not(.inactiveUser):hover:not(.tt) .ttd.scaleOut, .trH:not(.inactiveUser):hover ~ .tta.scaleOut,
.trF.tt.scaleOut:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.scaleOut, .trF:not(.inactiveUser):focus:not(.tt) .ttd.scaleOut, .trF:not(.inactiveUser):focus ~ .tta.scaleOut,
.trFW.tt.scaleOut:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.scaleOut, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.scaleOut, .trFW:not(.inactiveUser):focus-within ~ .tta.scaleOut,
.trA.active.tt.scaleOut:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.scaleOut, .trA:not(.inactiveUser).active:not(.tt) .ttd.scaleOut, .trA:not(.inactiveUser).active ~ .tta.scaleOut {
  transform: scale(1) translate3d(0, 0, 0);
  backface-visibility: hidden; }

.scaleIn:not(.tt):not(.tta),
.trH.tt.scaleIn:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.scaleIn, .trH:not(.inactiveUser):hover:not(.tt) .ttd.scaleIn, .trH:not(.inactiveUser):hover ~ .tta.scaleIn,
.trF.tt.scaleIn:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.scaleIn, .trF:not(.inactiveUser):focus:not(.tt) .ttd.scaleIn, .trF:not(.inactiveUser):focus ~ .tta.scaleIn,
.trFW.tt.scaleIn:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.scaleIn, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.scaleIn, .trFW:not(.inactiveUser):focus-within ~ .tta.scaleIn,
.trA.active.tt.scaleIn:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.scaleIn, .trA:not(.inactiveUser).active:not(.tt) .ttd.scaleIn, .trA:not(.inactiveUser).active ~ .tta.scaleIn, .inactiveUser.tt.scaleOut, .inactiveUser:not(.tt) > .tt.scaleOut, .inactiveUser:not(.tt) .ttd.scaleOut, .inactiveUser ~ .tta.scaleOut,
.trH.tt.scaleOut:not(:hover), .trH:not(:hover):not(.tt) > .tt.scaleOut, .trH:not(:hover):not(.tt) .ttd.scaleOut, .trH:not(:hover) ~ .tta.scaleOut,
.trF.tt.scaleOut:not(:focus), .trF:not(:focus):not(.tt) > .tt.scaleOut, .trF:not(:focus):not(.tt) .ttd.scaleOut, .trF:not(:focus) ~ .tta.scaleOut,
.trFW.tt.scaleOut:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.scaleOut, .trFW:not(:focus-within):not(.tt) .ttd.scaleOut, .trFW:not(:focus-within) ~ .tta.scaleOut,
.trA.tt.scaleOut:not(.active), .trA:not(.active):not(.tt) > .tt.scaleOut, .trA:not(.active):not(.tt) .ttd.scaleOut, .trA:not(.active) ~ .tta.scaleOut {
  transform: scale(0) translate3d(0, 0, 0);
  backface-visibility: hidden; }

.scale10percent:not(.tt):not(.tta),
.trH.tt.scale10percent:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.scale10percent, .trH:not(.inactiveUser):hover:not(.tt) .ttd.scale10percent, .trH:not(.inactiveUser):hover ~ .tta.scale10percent,
.trF.tt.scale10percent:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.scale10percent, .trF:not(.inactiveUser):focus:not(.tt) .ttd.scale10percent, .trF:not(.inactiveUser):focus ~ .tta.scale10percent,
.trFW.tt.scale10percent:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.scale10percent, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.scale10percent, .trFW:not(.inactiveUser):focus-within ~ .tta.scale10percent,
.trA.active.tt.scale10percent:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.scale10percent, .trA:not(.inactiveUser).active:not(.tt) .ttd.scale10percent, .trA:not(.inactiveUser).active ~ .tta.scale10percent {
  transform: scale(1.1) translate3d(0, 0, 0);
  backface-visibility: hidden; }

/************************************************************
  POSITION MODIFIER
************************************************************/
.slideToLeft:not(.tt):not(.tta),
.trH.tt.slideToLeft:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.slideToLeft, .trH:not(.inactiveUser):hover:not(.tt) .ttd.slideToLeft, .trH:not(.inactiveUser):hover ~ .tta.slideToLeft,
.trF.tt.slideToLeft:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.slideToLeft, .trF:not(.inactiveUser):focus:not(.tt) .ttd.slideToLeft, .trF:not(.inactiveUser):focus ~ .tta.slideToLeft,
.trFW.tt.slideToLeft:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.slideToLeft, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.slideToLeft, .trFW:not(.inactiveUser):focus-within ~ .tta.slideToLeft,
.trA.active.tt.slideToLeft:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.slideToLeft, .trA:not(.inactiveUser).active:not(.tt) .ttd.slideToLeft, .trA:not(.inactiveUser).active ~ .tta.slideToLeft, .inactiveUser.tt.slideFromLeft, .inactiveUser:not(.tt) > .tt.slideFromLeft, .inactiveUser:not(.tt) .ttd.slideFromLeft, .inactiveUser ~ .tta.slideFromLeft,
.trH.tt.slideFromLeft:not(:hover), .trH:not(:hover):not(.tt) > .tt.slideFromLeft, .trH:not(:hover):not(.tt) .ttd.slideFromLeft, .trH:not(:hover) ~ .tta.slideFromLeft,
.trF.tt.slideFromLeft:not(:focus), .trF:not(:focus):not(.tt) > .tt.slideFromLeft, .trF:not(:focus):not(.tt) .ttd.slideFromLeft, .trF:not(:focus) ~ .tta.slideFromLeft,
.trFW.tt.slideFromLeft:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.slideFromLeft, .trFW:not(:focus-within):not(.tt) .ttd.slideFromLeft, .trFW:not(:focus-within) ~ .tta.slideFromLeft,
.trA.tt.slideFromLeft:not(.active), .trA:not(.active):not(.tt) > .tt.slideFromLeft, .trA:not(.active):not(.tt) .ttd.slideFromLeft, .trA:not(.active) ~ .tta.slideFromLeft {
  transform: translateX(-100%); }

.slideToRight:not(.tt):not(.tta),
.trH.tt.slideToRight:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.slideToRight, .trH:not(.inactiveUser):hover:not(.tt) .ttd.slideToRight, .trH:not(.inactiveUser):hover ~ .tta.slideToRight,
.trF.tt.slideToRight:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.slideToRight, .trF:not(.inactiveUser):focus:not(.tt) .ttd.slideToRight, .trF:not(.inactiveUser):focus ~ .tta.slideToRight,
.trFW.tt.slideToRight:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.slideToRight, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.slideToRight, .trFW:not(.inactiveUser):focus-within ~ .tta.slideToRight,
.trA.active.tt.slideToRight:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.slideToRight, .trA:not(.inactiveUser).active:not(.tt) .ttd.slideToRight, .trA:not(.inactiveUser).active ~ .tta.slideToRight, .inactiveUser.tt.slideFromRight, .inactiveUser:not(.tt) > .tt.slideFromRight, .inactiveUser:not(.tt) .ttd.slideFromRight, .inactiveUser ~ .tta.slideFromRight,
.trH.tt.slideFromRight:not(:hover), .trH:not(:hover):not(.tt) > .tt.slideFromRight, .trH:not(:hover):not(.tt) .ttd.slideFromRight, .trH:not(:hover) ~ .tta.slideFromRight,
.trF.tt.slideFromRight:not(:focus), .trF:not(:focus):not(.tt) > .tt.slideFromRight, .trF:not(:focus):not(.tt) .ttd.slideFromRight, .trF:not(:focus) ~ .tta.slideFromRight,
.trFW.tt.slideFromRight:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.slideFromRight, .trFW:not(:focus-within):not(.tt) .ttd.slideFromRight, .trFW:not(:focus-within) ~ .tta.slideFromRight,
.trA.tt.slideFromRight:not(.active), .trA:not(.active):not(.tt) > .tt.slideFromRight, .trA:not(.active):not(.tt) .ttd.slideFromRight, .trA:not(.active) ~ .tta.slideFromRight {
  transform: translateX(100%); }

.inactiveUser.tt.slideToLeft, .inactiveUser:not(.tt) > .tt.slideToLeft, .inactiveUser:not(.tt) .ttd.slideToLeft, .inactiveUser ~ .tta.slideToLeft,
.trH.tt.slideToLeft:not(:hover), .trH:not(:hover):not(.tt) > .tt.slideToLeft, .trH:not(:hover):not(.tt) .ttd.slideToLeft, .trH:not(:hover) ~ .tta.slideToLeft,
.trF.tt.slideToLeft:not(:focus), .trF:not(:focus):not(.tt) > .tt.slideToLeft, .trF:not(:focus):not(.tt) .ttd.slideToLeft, .trF:not(:focus) ~ .tta.slideToLeft,
.trFW.tt.slideToLeft:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.slideToLeft, .trFW:not(:focus-within):not(.tt) .ttd.slideToLeft, .trFW:not(:focus-within) ~ .tta.slideToLeft,
.trA.tt.slideToLeft:not(.active), .trA:not(.active):not(.tt) > .tt.slideToLeft, .trA:not(.active):not(.tt) .ttd.slideToLeft, .trA:not(.active) ~ .tta.slideToLeft, .inactiveUser.tt.slideToRight, .inactiveUser:not(.tt) > .tt.slideToRight, .inactiveUser:not(.tt) .ttd.slideToRight, .inactiveUser ~ .tta.slideToRight,
.trH.tt.slideToRight:not(:hover), .trH:not(:hover):not(.tt) > .tt.slideToRight, .trH:not(:hover):not(.tt) .ttd.slideToRight, .trH:not(:hover) ~ .tta.slideToRight,
.trF.tt.slideToRight:not(:focus), .trF:not(:focus):not(.tt) > .tt.slideToRight, .trF:not(:focus):not(.tt) .ttd.slideToRight, .trF:not(:focus) ~ .tta.slideToRight,
.trFW.tt.slideToRight:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.slideToRight, .trFW:not(:focus-within):not(.tt) .ttd.slideToRight, .trFW:not(:focus-within) ~ .tta.slideToRight,
.trA.tt.slideToRight:not(.active), .trA:not(.active):not(.tt) > .tt.slideToRight, .trA:not(.active):not(.tt) .ttd.slideToRight, .trA:not(.active) ~ .tta.slideToRight, .slideFromLeft:not(.tt):not(.tta),
.trH.tt.slideFromLeft:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.slideFromLeft, .trH:not(.inactiveUser):hover:not(.tt) .ttd.slideFromLeft, .trH:not(.inactiveUser):hover ~ .tta.slideFromLeft,
.trF.tt.slideFromLeft:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.slideFromLeft, .trF:not(.inactiveUser):focus:not(.tt) .ttd.slideFromLeft, .trF:not(.inactiveUser):focus ~ .tta.slideFromLeft,
.trFW.tt.slideFromLeft:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.slideFromLeft, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.slideFromLeft, .trFW:not(.inactiveUser):focus-within ~ .tta.slideFromLeft,
.trA.active.tt.slideFromLeft:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.slideFromLeft, .trA:not(.inactiveUser).active:not(.tt) .ttd.slideFromLeft, .trA:not(.inactiveUser).active ~ .tta.slideFromLeft, .slideFromRight:not(.tt):not(.tta),
.trH.tt.slideFromRight:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.slideFromRight, .trH:not(.inactiveUser):hover:not(.tt) .ttd.slideFromRight, .trH:not(.inactiveUser):hover ~ .tta.slideFromRight,
.trF.tt.slideFromRight:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.slideFromRight, .trF:not(.inactiveUser):focus:not(.tt) .ttd.slideFromRight, .trF:not(.inactiveUser):focus ~ .tta.slideFromRight,
.trFW.tt.slideFromRight:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.slideFromRight, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.slideFromRight, .trFW:not(.inactiveUser):focus-within ~ .tta.slideFromRight,
.trA.active.tt.slideFromRight:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.slideFromRight, .trA:not(.inactiveUser).active:not(.tt) .ttd.slideFromRight, .trA:not(.inactiveUser).active ~ .tta.slideFromRight {
  transform: translateX(0%); }

.slideToTop:not(.tt):not(.tta),
.trH.tt.slideToTop:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.slideToTop, .trH:not(.inactiveUser):hover:not(.tt) .ttd.slideToTop, .trH:not(.inactiveUser):hover ~ .tta.slideToTop,
.trF.tt.slideToTop:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.slideToTop, .trF:not(.inactiveUser):focus:not(.tt) .ttd.slideToTop, .trF:not(.inactiveUser):focus ~ .tta.slideToTop,
.trFW.tt.slideToTop:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.slideToTop, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.slideToTop, .trFW:not(.inactiveUser):focus-within ~ .tta.slideToTop,
.trA.active.tt.slideToTop:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.slideToTop, .trA:not(.inactiveUser).active:not(.tt) .ttd.slideToTop, .trA:not(.inactiveUser).active ~ .tta.slideToTop, .inactiveUser.tt.slideFromTop, .inactiveUser:not(.tt) > .tt.slideFromTop, .inactiveUser:not(.tt) .ttd.slideFromTop, .inactiveUser ~ .tta.slideFromTop,
.trH.tt.slideFromTop:not(:hover), .trH:not(:hover):not(.tt) > .tt.slideFromTop, .trH:not(:hover):not(.tt) .ttd.slideFromTop, .trH:not(:hover) ~ .tta.slideFromTop,
.trF.tt.slideFromTop:not(:focus), .trF:not(:focus):not(.tt) > .tt.slideFromTop, .trF:not(:focus):not(.tt) .ttd.slideFromTop, .trF:not(:focus) ~ .tta.slideFromTop,
.trFW.tt.slideFromTop:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.slideFromTop, .trFW:not(:focus-within):not(.tt) .ttd.slideFromTop, .trFW:not(:focus-within) ~ .tta.slideFromTop,
.trA.tt.slideFromTop:not(.active), .trA:not(.active):not(.tt) > .tt.slideFromTop, .trA:not(.active):not(.tt) .ttd.slideFromTop, .trA:not(.active) ~ .tta.slideFromTop {
  transform: translateY(-100%); }

.slideToBottom:not(.tt):not(.tta),
.trH.tt.slideToBottom:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.slideToBottom, .trH:not(.inactiveUser):hover:not(.tt) .ttd.slideToBottom, .trH:not(.inactiveUser):hover ~ .tta.slideToBottom,
.trF.tt.slideToBottom:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.slideToBottom, .trF:not(.inactiveUser):focus:not(.tt) .ttd.slideToBottom, .trF:not(.inactiveUser):focus ~ .tta.slideToBottom,
.trFW.tt.slideToBottom:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.slideToBottom, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.slideToBottom, .trFW:not(.inactiveUser):focus-within ~ .tta.slideToBottom,
.trA.active.tt.slideToBottom:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.slideToBottom, .trA:not(.inactiveUser).active:not(.tt) .ttd.slideToBottom, .trA:not(.inactiveUser).active ~ .tta.slideToBottom, .inactiveUser.tt.slideFromBottom, .inactiveUser:not(.tt) > .tt.slideFromBottom, .inactiveUser:not(.tt) .ttd.slideFromBottom, .inactiveUser ~ .tta.slideFromBottom,
.trH.tt.slideFromBottom:not(:hover), .trH:not(:hover):not(.tt) > .tt.slideFromBottom, .trH:not(:hover):not(.tt) .ttd.slideFromBottom, .trH:not(:hover) ~ .tta.slideFromBottom,
.trF.tt.slideFromBottom:not(:focus), .trF:not(:focus):not(.tt) > .tt.slideFromBottom, .trF:not(:focus):not(.tt) .ttd.slideFromBottom, .trF:not(:focus) ~ .tta.slideFromBottom,
.trFW.tt.slideFromBottom:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.slideFromBottom, .trFW:not(:focus-within):not(.tt) .ttd.slideFromBottom, .trFW:not(:focus-within) ~ .tta.slideFromBottom,
.trA.tt.slideFromBottom:not(.active), .trA:not(.active):not(.tt) > .tt.slideFromBottom, .trA:not(.active):not(.tt) .ttd.slideFromBottom, .trA:not(.active) ~ .tta.slideFromBottom {
  transform: translateY(100%); }

.inactiveUser.tt.slideToTop, .inactiveUser:not(.tt) > .tt.slideToTop, .inactiveUser:not(.tt) .ttd.slideToTop, .inactiveUser ~ .tta.slideToTop,
.trH.tt.slideToTop:not(:hover), .trH:not(:hover):not(.tt) > .tt.slideToTop, .trH:not(:hover):not(.tt) .ttd.slideToTop, .trH:not(:hover) ~ .tta.slideToTop,
.trF.tt.slideToTop:not(:focus), .trF:not(:focus):not(.tt) > .tt.slideToTop, .trF:not(:focus):not(.tt) .ttd.slideToTop, .trF:not(:focus) ~ .tta.slideToTop,
.trFW.tt.slideToTop:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.slideToTop, .trFW:not(:focus-within):not(.tt) .ttd.slideToTop, .trFW:not(:focus-within) ~ .tta.slideToTop,
.trA.tt.slideToTop:not(.active), .trA:not(.active):not(.tt) > .tt.slideToTop, .trA:not(.active):not(.tt) .ttd.slideToTop, .trA:not(.active) ~ .tta.slideToTop, .inactiveUser.tt.slideToBottom, .inactiveUser:not(.tt) > .tt.slideToBottom, .inactiveUser:not(.tt) .ttd.slideToBottom, .inactiveUser ~ .tta.slideToBottom,
.trH.tt.slideToBottom:not(:hover), .trH:not(:hover):not(.tt) > .tt.slideToBottom, .trH:not(:hover):not(.tt) .ttd.slideToBottom, .trH:not(:hover) ~ .tta.slideToBottom,
.trF.tt.slideToBottom:not(:focus), .trF:not(:focus):not(.tt) > .tt.slideToBottom, .trF:not(:focus):not(.tt) .ttd.slideToBottom, .trF:not(:focus) ~ .tta.slideToBottom,
.trFW.tt.slideToBottom:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.slideToBottom, .trFW:not(:focus-within):not(.tt) .ttd.slideToBottom, .trFW:not(:focus-within) ~ .tta.slideToBottom,
.trA.tt.slideToBottom:not(.active), .trA:not(.active):not(.tt) > .tt.slideToBottom, .trA:not(.active):not(.tt) .ttd.slideToBottom, .trA:not(.active) ~ .tta.slideToBottom, .slideFromTop:not(.tt):not(.tta),
.trH.tt.slideFromTop:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.slideFromTop, .trH:not(.inactiveUser):hover:not(.tt) .ttd.slideFromTop, .trH:not(.inactiveUser):hover ~ .tta.slideFromTop,
.trF.tt.slideFromTop:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.slideFromTop, .trF:not(.inactiveUser):focus:not(.tt) .ttd.slideFromTop, .trF:not(.inactiveUser):focus ~ .tta.slideFromTop,
.trFW.tt.slideFromTop:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.slideFromTop, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.slideFromTop, .trFW:not(.inactiveUser):focus-within ~ .tta.slideFromTop,
.trA.active.tt.slideFromTop:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.slideFromTop, .trA:not(.inactiveUser).active:not(.tt) .ttd.slideFromTop, .trA:not(.inactiveUser).active ~ .tta.slideFromTop, .slideFromBottom:not(.tt):not(.tta),
.trH.tt.slideFromBottom:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.slideFromBottom, .trH:not(.inactiveUser):hover:not(.tt) .ttd.slideFromBottom, .trH:not(.inactiveUser):hover ~ .tta.slideFromBottom,
.trF.tt.slideFromBottom:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.slideFromBottom, .trF:not(.inactiveUser):focus:not(.tt) .ttd.slideFromBottom, .trF:not(.inactiveUser):focus ~ .tta.slideFromBottom,
.trFW.tt.slideFromBottom:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.slideFromBottom, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.slideFromBottom, .trFW:not(.inactiveUser):focus-within ~ .tta.slideFromBottom,
.trA.active.tt.slideFromBottom:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.slideFromBottom, .trA:not(.inactiveUser).active:not(.tt) .ttd.slideFromBottom, .trA:not(.inactiveUser).active ~ .tta.slideFromBottom {
  transform: translateY(0%); }

.slideFromLeftToRight-enter {
  transform: translateX(-100%); }

.slideFromLeftToRight-enter-active {
  transform: translateX(0%);
  transition: transform 1s ease; }

.slideFromLeftToRight-leave {
  transform: translateX(0%); }

.slideFromLeftToRight-leave-active {
  transform: translateX(100%);
  transition: transform 1s ease; }

.slideFromRightToLeft-enter {
  transform: translateX(100%); }

.slideFromRightToLeft-enter-active {
  transform: translateX(0%);
  transition: transform 1s ease; }

.slideFromRightToLeft-leave {
  transform: translateX(0%); }

.slideFromRightToLeft-leave-active {
  transform: translateX(-100%);
  transition: transform 1s ease; }

/************************************************************
  CLIP MODIFIER
************************************************************/
.restoreFromEdgesHorizontal:not(.tt):not(.tta),
.trH:not(.inactiveUser):hover.tt.restoreFromEdgesHorizontal, .trH:not(.inactiveUser):hover:not(.tt) > .tt.restoreFromEdgesHorizontal, .trH:not(.inactiveUser):hover:not(.tt) .ttd.restoreFromEdgesHorizontal, .trH:not(.inactiveUser):hover ~ .tta.restoreFromEdgesHorizontal,
.trF:not(.inactiveUser):focus.tt.restoreFromEdgesHorizontal, .trF:not(.inactiveUser):focus:not(.tt) > .tt.restoreFromEdgesHorizontal, .trF:not(.inactiveUser):focus:not(.tt) .ttd.restoreFromEdgesHorizontal, .trF:not(.inactiveUser):focus ~ .tta.restoreFromEdgesHorizontal,
.trFW:not(.inactiveUser):focus-within.tt.restoreFromEdgesHorizontal, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.restoreFromEdgesHorizontal, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.restoreFromEdgesHorizontal, .trFW:not(.inactiveUser):focus-within ~ .tta.restoreFromEdgesHorizontal,
.trA:not(.inactiveUser).active.tt.restoreFromEdgesHorizontal, .trA:not(.inactiveUser).active:not(.tt) > .tt.restoreFromEdgesHorizontal, .trA:not(.inactiveUser).active:not(.tt) .ttd.restoreFromEdgesHorizontal, .trA:not(.inactiveUser).active ~ .tta.restoreFromEdgesHorizontal {
  animation-name: restoreCutFromEdgesToCenterHorizontal; }

.inactiveUser.tt.restoreFromEdgesHorizontal, .inactiveUser:not(.tt) > .tt.restoreFromEdgesHorizontal, .inactiveUser:not(.tt) .ttd.restoreFromEdgesHorizontal, .inactiveUser ~ .tta.restoreFromEdgesHorizontal,
.trH:not(:hover).tt.restoreFromEdgesHorizontal, .trH:not(:hover):not(.tt) > .tt.restoreFromEdgesHorizontal, .trH:not(:hover):not(.tt) .ttd.restoreFromEdgesHorizontal, .trH:not(:hover) ~ .tta.restoreFromEdgesHorizontal,
.trF:not(:focus).tt.restoreFromEdgesHorizontal, .trF:not(:focus):not(.tt) > .tt.restoreFromEdgesHorizontal, .trF:not(:focus) ~ .tta.restoreFromEdgesHorizontal,
.trFW:not(:focus-within).tt.restoreFromEdgesHorizontal, .trFW:not(:focus-within):not(.tt) > .tt.restoreFromEdgesHorizontal, .trFW:not(:focus-within):not(.tt) .ttd.restoreFromEdgesHorizontal, .trFW:not(:focus-within) ~ .tta.restoreFromEdgesHorizontal,
.trA:not(.active).tt.restoreFromEdgesHorizontal, .trA:not(.active):not(.tt) > .tt.restoreFromEdgesHorizontal, .trA:not(.active):not(.tt) .ttd.restoreFromEdgesHorizontal, .trA:not(.active) ~ .tta.restoreFromEdgesHorizontal {
  animation-name: cutFromEdgesToCenterHorizontal; }

.restoreFromCenterHorizontal:not(.tt):not(.tta),
.trH:not(.inactiveUser):hover.tt.restoreFromCenterHorizontal, .trH:not(.inactiveUser):hover:not(.tt) > .tt.restoreFromCenterHorizontal, .trH:not(.inactiveUser):hover:not(.tt) .ttd.restoreFromCenterHorizontal, .trH:not(.inactiveUser):hover ~ .tta.restoreFromCenterHorizontal,
.trF:not(.inactiveUser):focus.tt.restoreFromCenterHorizontal, .trF:not(.inactiveUser):focus:not(.tt) > .tt.restoreFromCenterHorizontal, .trF:not(.inactiveUser):focus:not(.tt) .ttd.restoreFromCenterHorizontal, .trF:not(.inactiveUser):focus ~ .tta.restoreFromCenterHorizontal,
.trFW:not(.inactiveUser):focus-within.tt.restoreFromCenterHorizontal, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.restoreFromCenterHorizontal, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.restoreFromCenterHorizontal, .trFW:not(.inactiveUser):focus-within ~ .tta.restoreFromCenterHorizontal,
.trA:not(.inactiveUser).active.tt.restoreFromCenterHorizontal, .trA:not(.inactiveUser).active:not(.tt) > .tt.restoreFromCenterHorizontal, .trA:not(.inactiveUser).active:not(.tt) .ttd.restoreFromCenterHorizontal, .trA:not(.inactiveUser).active ~ .tta.restoreFromCenterHorizontal {
  animation-name: restoreCutFromCenterToEdgesHorizontal; }

.inactiveUser.tt.restoreFromCenterHorizontal, .inactiveUser:not(.tt) > .tt.restoreFromCenterHorizontal, .inactiveUser:not(.tt) .ttd.restoreFromCenterHorizontal, .inactiveUser ~ .tta.restoreFromCenterHorizontal,
.trH:not(:hover).tt.restoreFromCenterHorizontal, .trH:not(:hover):not(.tt) > .tt.restoreFromCenterHorizontal, .trH:not(:hover):not(.tt) .ttd.restoreFromCenterHorizontal, .trH:not(:hover) ~ .tta.restoreFromCenterHorizontal,
.trF:not(:focus).tt.restoreFromCenterHorizontal, .trF:not(:focus):not(.tt) > .tt.restoreFromCenterHorizontal, .trF:not(:focus) ~ .tta.restoreFromCenterHorizontal,
.trFW:not(:focus-within).tt.restoreFromCenterHorizontal, .trFW:not(:focus-within):not(.tt) > .tt.restoreFromCenterHorizontal, .trFW:not(:focus-within):not(.tt) .ttd.restoreFromCenterHorizontal, .trFW:not(:focus-within) ~ .tta.restoreFromCenterHorizontal,
.trA:not(.active).tt.restoreFromCenterHorizontal, .trA:not(.active):not(.tt) > .tt.restoreFromCenterHorizontal, .trA:not(.active):not(.tt) .ttd.restoreFromCenterHorizontal, .trA:not(.active) ~ .tta.restoreFromCenterHorizontal {
  animation-name: cutFromCenterToEdgesHorizontal; }

@keyframes cutFromCenterToEdgesHorizontal {
  0% {
    clip-path: polygon(0% 0%, 0% 100%, 50% 100%, 50% 0%, 50% 0%, 50% 100%, 100% 100%, 100% 0%); }
  100% {
    clip-path: polygon(0% 0%, 0% 100%, 0% 100%, 0% 0%, 100% 0%, 100% 100%, 100% 100%, 100% 0%); } }

@keyframes cutFromEdgesToCenterHorizontal {
  0% {
    clip-path: polygon(0% 0%, 0% 100%, 50% 100%, 50% 0%, 50% 0%, 50% 100%, 100% 100%, 100% 0%); }
  100% {
    clip-path: polygon(50% 0%, 50% 100%, 50% 100%, 50% 0%, 50% 0%, 50% 100%, 50% 100%, 50% 0%); } }

@keyframes restoreCutFromCenterToEdgesHorizontal {
  0% {
    clip-path: polygon(50% 0%, 50% 100%, 50% 100%, 50% 0%, 50% 0%, 50% 100%, 50% 100%, 50% 0%); }
  100% {
    clip-path: polygon(0% 0%, 0% 100%, 50% 100%, 50% 0%, 50% 0%, 50% 100%, 100% 100%, 100% 0%); } }

@keyframes restoreCutFromEdgesToCenterHorizontal {
  0% {
    clip-path: polygon(0% 0%, 0% 100%, 0% 100%, 0% 0%, 100% 0%, 100% 100%, 100% 100%, 100% 0%); }
  100% {
    clip-path: polygon(0% 0%, 0% 100%, 50% 100%, 50% 0%, 50% 0%, 50% 100%, 100% 100%, 100% 0%); } }

.restoreFromEdgesDiagonal:not(.tt):not(.tta),
.trH:not(.inactiveUser):hover.tt.restoreFromEdgesDiagonal, .trH:not(.inactiveUser):hover:not(.tt) > .tt.restoreFromEdgesDiagonal, .trH:not(.inactiveUser):hover:not(.tt) .ttd.restoreFromEdgesDiagonal, .trH:not(.inactiveUser):hover ~ .tta.restoreFromEdgesDiagonal,
.trF:not(.inactiveUser):focus.tt.restoreFromEdgesDiagonal, .trF:not(.inactiveUser):focus:not(.tt) > .tt.restoreFromEdgesDiagonal, .trF:not(.inactiveUser):focus:not(.tt) .ttd.restoreFromEdgesDiagonal, .trF:not(.inactiveUser):focus ~ .tta.restoreFromEdgesDiagonal,
.trFW:not(.inactiveUser):focus-within.tt.restoreFromEdgesDiagonal, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.restoreFromEdgesDiagonal, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.restoreFromEdgesDiagonal, .trFW:not(.inactiveUser):focus-within ~ .tta.restoreFromEdgesDiagonal,
.trA:not(.inactiveUser).active.tt.restoreFromEdgesDiagonal, .trA:not(.inactiveUser).active:not(.tt) > .tt.restoreFromEdgesDiagonal, .trA:not(.inactiveUser).active:not(.tt) .ttd.restoreFromEdgesDiagonal, .trA:not(.inactiveUser).active ~ .tta.restoreFromEdgesDiagonal {
  animation-name: restoreFromCenterToEdgesDiagonal; }

.inactiveUser.tt.restoreFromEdgesDiagonal, .inactiveUser:not(.tt) > .tt.restoreFromEdgesDiagonal, .inactiveUser:not(.tt) .ttd.restoreFromEdgesDiagonal, .inactiveUser ~ .tta.restoreFromEdgesDiagonal,
.trH:not(:hover).tt.restoreFromEdgesDiagonal, .trH:not(:hover):not(.tt) > .tt.restoreFromEdgesDiagonal, .trH:not(:hover):not(.tt) .ttd.restoreFromEdgesDiagonal, .trH:not(:hover) ~ .tta.restoreFromEdgesDiagonal,
.trF:not(:focus).tt.restoreFromEdgesDiagonal, .trF:not(:focus):not(.tt) > .tt.restoreFromEdgesDiagonal, .trF:not(:focus) ~ .tta.restoreFromEdgesDiagonal,
.trFW:not(:focus-within).tt.restoreFromEdgesDiagonal, .trFW:not(:focus-within):not(.tt) > .tt.restoreFromEdgesDiagonal, .trFW:not(:focus-within):not(.tt) .ttd.restoreFromEdgesDiagonal, .trFW:not(:focus-within) ~ .tta.restoreFromEdgesDiagonal,
.trA:not(.active).tt.restoreFromEdgesDiagonal, .trA:not(.active):not(.tt) > .tt.restoreFromEdgesDiagonal, .trA:not(.active):not(.tt) .ttd.restoreFromEdgesDiagonal, .trA:not(.active) ~ .tta.restoreFromEdgesDiagonal {
  animation-name: cutFromCenterToEdgesDiagonal; }

.restoreFromCenterDiagonal:not(.tt):not(.tta),
.trH:not(.inactiveUser):hover.tt.restoreFromCenterDiagonal, .trH:not(.inactiveUser):hover:not(.tt) > .tt.restoreFromCenterDiagonal, .trH:not(.inactiveUser):hover:not(.tt) .ttd.restoreFromCenterDiagonal, .trH:not(.inactiveUser):hover ~ .tta.restoreFromCenterDiagonal,
.trF:not(.inactiveUser):focus.tt.restoreFromCenterDiagonal, .trF:not(.inactiveUser):focus:not(.tt) > .tt.restoreFromCenterDiagonal, .trF:not(.inactiveUser):focus:not(.tt) .ttd.restoreFromCenterDiagonal, .trF:not(.inactiveUser):focus ~ .tta.restoreFromCenterDiagonal,
.trFW:not(.inactiveUser):focus-within.tt.restoreFromCenterDiagonal, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.restoreFromCenterDiagonal, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.restoreFromCenterDiagonal, .trFW:not(.inactiveUser):focus-within ~ .tta.restoreFromCenterDiagonal,
.trA:not(.inactiveUser).active.tt.restoreFromCenterDiagonal, .trA:not(.inactiveUser).active:not(.tt) > .tt.restoreFromCenterDiagonal, .trA:not(.inactiveUser).active:not(.tt) .ttd.restoreFromCenterDiagonal, .trA:not(.inactiveUser).active ~ .tta.restoreFromCenterDiagonal {
  animation-name: restoreFromEdgesToCenterDiagonal; }

.inactiveUser.tt.restoreFromCenterDiagonal, .inactiveUser:not(.tt) > .tt.restoreFromCenterDiagonal, .inactiveUser:not(.tt) .ttd.restoreFromCenterDiagonal, .inactiveUser ~ .tta.restoreFromCenterDiagonal,
.trH:not(:hover).tt.restoreFromCenterDiagonal, .trH:not(:hover):not(.tt) > .tt.restoreFromCenterDiagonal, .trH:not(:hover):not(.tt) .ttd.restoreFromCenterDiagonal, .trH:not(:hover) ~ .tta.restoreFromCenterDiagonal,
.trF:not(:focus).tt.restoreFromCenterDiagonal, .trF:not(:focus):not(.tt) > .tt.restoreFromCenterDiagonal, .trF:not(:focus) ~ .tta.restoreFromCenterDiagonal,
.trFW:not(:focus-within).tt.restoreFromCenterDiagonal, .trFW:not(:focus-within):not(.tt) > .tt.restoreFromCenterDiagonal, .trFW:not(:focus-within):not(.tt) .ttd.restoreFromCenterDiagonal, .trFW:not(:focus-within) ~ .tta.restoreFromCenterDiagonal,
.trA:not(.active).tt.restoreFromCenterDiagonal, .trA:not(.active):not(.tt) > .tt.restoreFromCenterDiagonal, .trA:not(.active):not(.tt) .ttd.restoreFromCenterDiagonal, .trA:not(.active) ~ .tta.restoreFromCenterDiagonal {
  animation-name: cutFromEdgesToCenterDiagonal; }

@keyframes cutFromCenterToEdgesDiagonal {
  0% {
    clip-path: polygon(0% 0, 0 0%, 0 100%, 100% 0, 100% 0, 100% 0%, 0% 100%, 100% 100%, 100% 100%, 100% 0); }
  100% {
    clip-path: polygon(0% 0, 0 0%, 0 0%, 0% 0, 100% 0, 100% 100%, 100% 100%, 100% 100%, 100% 100%, 100% 0); } }

@keyframes cutFromEdgesToCenterDiagonal {
  0% {
    clip-path: polygon(0% 0, 0 0%, 0 100%, 100% 0, 100% 0, 100% 0%, 0% 100%, 100% 100%, 100% 100%, 100% 0); }
  100% {
    clip-path: polygon(100% 0, 0 100%, 0 100%, 100% 0, 100% 0, 100% 0%, 0% 100%, 0% 100%, 100% 0%, 100% 0); } }

@keyframes restoreFromEdgesToCenterDiagonal {
  0% {
    clip-path: polygon(0% 0, 0 0%, 0 0%, 0% 0, 100% 0, 100% 100%, 100% 100%, 100% 100%, 100% 100%, 100% 0); }
  100% {
    clip-path: polygon(0% 0, 0 0%, 0 100%, 100% 0, 100% 0, 100% 0%, 0% 100%, 100% 100%, 100% 100%, 100% 0); } }

@keyframes restoreFromCenterToEdgesDiagonal {
  0% {
    clip-path: polygon(100% 0, 0 100%, 0 100%, 100% 0, 100% 0, 100% 0%, 0% 100%, 0% 100%, 100% 0%, 100% 0); }
  100% {
    clip-path: polygon(0% 0, 0 0%, 0 100%, 100% 0, 100% 0, 100% 0%, 0% 100%, 100% 100%, 100% 100%, 100% 0); } }

/************************************************************
  SHADOW MODIFIER
************************************************************/
/************************************************************
  ANIMATION MODIFIER
************************************************************/
/************************************************************
  TEXT SHADOW MODIFIER
************************************************************/
/************************************************************
  SHAPE MODIFIER
************************************************************/
.folder {
  background-color: var(--theme) !important;
  border-color: var(--theme) !important;
  color: var(--white);
  padding: 10px !important;
  border-radius: 5px !important;
  position: relative !important;
  border-top-left-radius: 0 !important;
  margin-top: 20px;
  margin: 10px 30px; }
  .folder > * {
    z-index: 1;
    padding: 0 !important;
    font-size: 0.6rem !important; }
  .folder:before {
    content: " ";
    position: absolute;
    left: 0;
    top: -10px;
    height: 0px;
    width: 50%;
    border-right: 10px solid transparent;
    border-bottom-width: 10px;
    border-bottom-style: solid;
    border-bottom-color: inherit;
    border-top-left-radius: 5px; }
  .folder:after {
    content: " ";
    position: absolute;
    left: 1px;
    bottom: 0;
    height: calc(100% - 10px);
    width: 100%;
    box-shadow: -3px -7px 10px -8px var(--shadow);
    border-radius: 5px;
    background-color: var(--theme);
    z-index: 0; }

.folder.active:after, .folder:hover:after, input:checked + .folder:after {
  box-shadow: -6px -7px 10px -8px var(--shadowDark);
  transform: skewX(-10deg) translateX(2px); }

.circle, .elipse {
  border-radius: 50%; }

/************************************************************
  COLOR MODIFIER
************************************************************/
.searchTextHighlight {
  color: var(--theme); }

.inactiveUser.tt.darkenBackground, .inactiveUser:not(.tt) > .tt.darkenBackground, .inactiveUser:not(.tt) .ttd.darkenBackground, .inactiveUser ~ .tta.darkenBackground,
.trH.tt.darkenBackground:not(:hover), .trH:not(:hover):not(.tt) > .tt.darkenBackground, .trH:not(:hover):not(.tt) .ttd.darkenBackground, .trH:not(:hover) ~ .tta.darkenBackground,
.trF.tt.darkenBackground:not(:focus), .trF:not(:focus):not(.tt) > .tt.darkenBackground, .trF:not(:focus):not(.tt) .ttd.darkenBackground, .trF:not(:focus) ~ .tta.darkenBackground,
.trFW.tt.darkenBackground:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.darkenBackground, .trFW:not(:focus-within):not(.tt) .ttd.darkenBackground, .trFW:not(:focus-within) ~ .tta.darkenBackground,
.trA.tt.darkenBackground:not(.active), .trA:not(.active):not(.tt) > .tt.darkenBackground, .trA:not(.active):not(.tt) .ttd.darkenBackground, .trA:not(.active) ~ .tta.darkenBackground, .undarkenBackground:not(.tt):not(.tta),
.trH.tt.undarkenBackground:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.undarkenBackground, .trH:not(.inactiveUser):hover:not(.tt) .ttd.undarkenBackground, .trH:not(.inactiveUser):hover ~ .tta.undarkenBackground,
.trF.tt.undarkenBackground:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.undarkenBackground, .trF:not(.inactiveUser):focus:not(.tt) .ttd.undarkenBackground, .trF:not(.inactiveUser):focus ~ .tta.undarkenBackground,
.trFW.tt.undarkenBackground:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.undarkenBackground, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.undarkenBackground, .trFW:not(.inactiveUser):focus-within ~ .tta.undarkenBackground,
.trA.active.tt.undarkenBackground:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.undarkenBackground, .trA:not(.inactiveUser).active:not(.tt) .ttd.undarkenBackground, .trA:not(.inactiveUser).active ~ .tta.undarkenBackground, .inactiveUser.tt.lightenBackground, .inactiveUser:not(.tt) > .tt.lightenBackground, .inactiveUser:not(.tt) .ttd.lightenBackground, .inactiveUser ~ .tta.lightenBackground,
.trH.tt.lightenBackground:not(:hover), .trH:not(:hover):not(.tt) > .tt.lightenBackground, .trH:not(:hover):not(.tt) .ttd.lightenBackground, .trH:not(:hover) ~ .tta.lightenBackground,
.trF.tt.lightenBackground:not(:focus), .trF:not(:focus):not(.tt) > .tt.lightenBackground, .trF:not(:focus):not(.tt) .ttd.lightenBackground, .trF:not(:focus) ~ .tta.lightenBackground,
.trFW.tt.lightenBackground:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.lightenBackground, .trFW:not(:focus-within):not(.tt) .ttd.lightenBackground, .trFW:not(:focus-within) ~ .tta.lightenBackground,
.trA.tt.lightenBackground:not(.active), .trA:not(.active):not(.tt) > .tt.lightenBackground, .trA:not(.active):not(.tt) .ttd.lightenBackground, .trA:not(.active) ~ .tta.lightenBackground, .unlightenBackground:not(.tt):not(.tta),
.trH.tt.unlightenBackground:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.unlightenBackground, .trH:not(.inactiveUser):hover:not(.tt) .ttd.unlightenBackground, .trH:not(.inactiveUser):hover ~ .tta.unlightenBackground,
.trF.tt.unlightenBackground:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.unlightenBackground, .trF:not(.inactiveUser):focus:not(.tt) .ttd.unlightenBackground, .trF:not(.inactiveUser):focus ~ .tta.unlightenBackground,
.trFW.tt.unlightenBackground:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.unlightenBackground, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.unlightenBackground, .trFW:not(.inactiveUser):focus-within ~ .tta.unlightenBackground,
.trA.active.tt.unlightenBackground:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.unlightenBackground, .trA:not(.inactiveUser).active:not(.tt) .ttd.unlightenBackground, .trA:not(.inactiveUser).active ~ .tta.unlightenBackground {
  background-color: transparent; }

.darkenBackground:not(.tt):not(.tta),
.trH.tt.darkenBackground:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.darkenBackground, .trH:not(.inactiveUser):hover:not(.tt) .ttd.darkenBackground, .trH:not(.inactiveUser):hover ~ .tta.darkenBackground,
.trF.tt.darkenBackground:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.darkenBackground, .trF:not(.inactiveUser):focus:not(.tt) .ttd.darkenBackground, .trF:not(.inactiveUser):focus ~ .tta.darkenBackground,
.trFW.tt.darkenBackground:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.darkenBackground, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.darkenBackground, .trFW:not(.inactiveUser):focus-within ~ .tta.darkenBackground,
.trA.active.tt.darkenBackground:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.darkenBackground, .trA:not(.inactiveUser).active:not(.tt) .ttd.darkenBackground, .trA:not(.inactiveUser).active ~ .tta.darkenBackground, .inactiveUser.tt.undarkenBackground, .inactiveUser:not(.tt) > .tt.undarkenBackground, .inactiveUser:not(.tt) .ttd.undarkenBackground, .inactiveUser ~ .tta.undarkenBackground,
.trH.tt.undarkenBackground:not(:hover), .trH:not(:hover):not(.tt) > .tt.undarkenBackground, .trH:not(:hover):not(.tt) .ttd.undarkenBackground, .trH:not(:hover) ~ .tta.undarkenBackground,
.trF.tt.undarkenBackground:not(:focus), .trF:not(:focus):not(.tt) > .tt.undarkenBackground, .trF:not(:focus):not(.tt) .ttd.undarkenBackground, .trF:not(:focus) ~ .tta.undarkenBackground,
.trFW.tt.undarkenBackground:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.undarkenBackground, .trFW:not(:focus-within):not(.tt) .ttd.undarkenBackground, .trFW:not(:focus-within) ~ .tta.undarkenBackground,
.trA.tt.undarkenBackground:not(.active), .trA:not(.active):not(.tt) > .tt.undarkenBackground, .trA:not(.active):not(.tt) .ttd.undarkenBackground, .trA:not(.active) ~ .tta.undarkenBackground {
  background-color: var(--shadowDark); }

.lightenBackground:not(.tt):not(.tta),
.trH.tt.lightenBackground:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.lightenBackground, .trH:not(.inactiveUser):hover:not(.tt) .ttd.lightenBackground, .trH:not(.inactiveUser):hover ~ .tta.lightenBackground,
.trF.tt.lightenBackground:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.lightenBackground, .trF:not(.inactiveUser):focus:not(.tt) .ttd.lightenBackground, .trF:not(.inactiveUser):focus ~ .tta.lightenBackground,
.trFW.tt.lightenBackground:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.lightenBackground, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.lightenBackground, .trFW:not(.inactiveUser):focus-within ~ .tta.lightenBackground,
.trA.active.tt.lightenBackground:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.lightenBackground, .trA:not(.inactiveUser).active:not(.tt) .ttd.lightenBackground, .trA:not(.inactiveUser).active ~ .tta.lightenBackground, .inactiveUser.tt.unlightenBackground, .inactiveUser:not(.tt) > .tt.unlightenBackground, .inactiveUser:not(.tt) .ttd.unlightenBackground, .inactiveUser ~ .tta.unlightenBackground,
.trH.tt.unlightenBackground:not(:hover), .trH:not(:hover):not(.tt) > .tt.unlightenBackground, .trH:not(:hover):not(.tt) .ttd.unlightenBackground, .trH:not(:hover) ~ .tta.unlightenBackground,
.trF.tt.unlightenBackground:not(:focus), .trF:not(:focus):not(.tt) > .tt.unlightenBackground, .trF:not(:focus):not(.tt) .ttd.unlightenBackground, .trF:not(:focus) ~ .tta.unlightenBackground,
.trFW.tt.unlightenBackground:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.unlightenBackground, .trFW:not(:focus-within):not(.tt) .ttd.unlightenBackground, .trFW:not(:focus-within) ~ .tta.unlightenBackground,
.trA.tt.unlightenBackground:not(.active), .trA:not(.active):not(.tt) > .tt.unlightenBackground, .trA:not(.active):not(.tt) .ttd.unlightenBackground, .trA:not(.active) ~ .tta.unlightenBackground {
  background-color: var(--highlightLight); }

/************************************************************
  OTHER MODIFIERS
************************************************************/
.inactiveUser.tt.addBlur, .inactiveUser:not(.tt) > .tt.addBlur, .inactiveUser:not(.tt) .ttd.addBlur, .inactiveUser ~ .tta.addBlur,
.trH.tt.addBlur:not(:hover), .trH:not(:hover):not(.tt) > .tt.addBlur, .trH:not(:hover):not(.tt) .ttd.addBlur, .trH:not(:hover) ~ .tta.addBlur,
.trF.tt.addBlur:not(:focus), .trF:not(:focus):not(.tt) > .tt.addBlur, .trF:not(:focus):not(.tt) .ttd.addBlur, .trF:not(:focus) ~ .tta.addBlur,
.trFW.tt.addBlur:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.addBlur, .trFW:not(:focus-within):not(.tt) .ttd.addBlur, .trFW:not(:focus-within) ~ .tta.addBlur,
.trA.tt.addBlur:not(.active), .trA:not(.active):not(.tt) > .tt.addBlur, .trA:not(.active):not(.tt) .ttd.addBlur, .trA:not(.active) ~ .tta.addBlur, .removeBlur:not(.tt):not(.tta),
.trH.tt.removeBlur:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.removeBlur, .trH:not(.inactiveUser):hover:not(.tt) .ttd.removeBlur, .trH:not(.inactiveUser):hover ~ .tta.removeBlur,
.trF.tt.removeBlur:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.removeBlur, .trF:not(.inactiveUser):focus:not(.tt) .ttd.removeBlur, .trF:not(.inactiveUser):focus ~ .tta.removeBlur,
.trFW.tt.removeBlur:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.removeBlur, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.removeBlur, .trFW:not(.inactiveUser):focus-within ~ .tta.removeBlur,
.trA.active.tt.removeBlur:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.removeBlur, .trA:not(.inactiveUser).active:not(.tt) .ttd.removeBlur, .trA:not(.inactiveUser).active ~ .tta.removeBlur {
  filter: blur(0px); }

.addBlur:not(.tt):not(.tta),
.trH.tt.addBlur:not(.inactiveUser):hover, .trH:not(.inactiveUser):hover:not(.tt) > .tt.addBlur, .trH:not(.inactiveUser):hover:not(.tt) .ttd.addBlur, .trH:not(.inactiveUser):hover ~ .tta.addBlur,
.trF.tt.addBlur:not(.inactiveUser):focus, .trF:not(.inactiveUser):focus:not(.tt) > .tt.addBlur, .trF:not(.inactiveUser):focus:not(.tt) .ttd.addBlur, .trF:not(.inactiveUser):focus ~ .tta.addBlur,
.trFW.tt.addBlur:not(.inactiveUser):focus-within, .trFW:not(.inactiveUser):focus-within:not(.tt) > .tt.addBlur, .trFW:not(.inactiveUser):focus-within:not(.tt) .ttd.addBlur, .trFW:not(.inactiveUser):focus-within ~ .tta.addBlur,
.trA.active.tt.addBlur:not(.inactiveUser), .trA:not(.inactiveUser).active:not(.tt) > .tt.addBlur, .trA:not(.inactiveUser).active:not(.tt) .ttd.addBlur, .trA:not(.inactiveUser).active ~ .tta.addBlur, .inactiveUser.tt.removeBlur, .inactiveUser:not(.tt) > .tt.removeBlur, .inactiveUser:not(.tt) .ttd.removeBlur, .inactiveUser ~ .tta.removeBlur,
.trH.tt.removeBlur:not(:hover), .trH:not(:hover):not(.tt) > .tt.removeBlur, .trH:not(:hover):not(.tt) .ttd.removeBlur, .trH:not(:hover) ~ .tta.removeBlur,
.trF.tt.removeBlur:not(:focus), .trF:not(:focus):not(.tt) > .tt.removeBlur, .trF:not(:focus):not(.tt) .ttd.removeBlur, .trF:not(:focus) ~ .tta.removeBlur,
.trFW.tt.removeBlur:not(:focus-within), .trFW:not(:focus-within):not(.tt) > .tt.removeBlur, .trFW:not(:focus-within):not(.tt) .ttd.removeBlur, .trFW:not(:focus-within) ~ .tta.removeBlur,
.trA.tt.removeBlur:not(.active), .trA:not(.active):not(.tt) > .tt.removeBlur, .trA:not(.active):not(.tt) .ttd.removeBlur, .trA:not(.active) ~ .tta.removeBlur {
  filter: blur(2px); }

.ghostSpaceForHoverRight:after, .ghostSpaceForHoverLeft:after, .ghostSpaceForHoverTop:after, .ghostSpaceForHoverBottom:after {
  content: " ";
  background-color: transparent;
  position: absolute;
  z-index: 1; }

.ghostSpaceForHoverRight:after {
  width: 50px;
  margin-left: 100%;
  height: 100%;
  top: 0; }

.ghostSpaceForHoverLeft:after {
  width: 50px;
  margin-right: 100%;
  height: 100%;
  right: 0; }

.ghostSpaceForHoverTop:after {
  width: 100%;
  margin-bottom: 100%;
  height: 50px; }

.ghostSpaceForHoverBottom:after {
  width: 100%;
  margin-top: 100%;
  height: 50px; }

.clickable, button, wp-button, wp-action, input[type="checkbox"] + label, input[type="radio"] + label {
  cursor: pointer; }

.disabled {
  pointer-events: none;
  opacity: 0.6; }

.hidden {
  display: none !important; }

.inactiveUser.tt.disabledOnUserAction, .inactiveUser:not(.tt) > .tt.disabledOnUserAction, .inactiveUser:not(.tt) .ttd.disabledOnUserAction, .inactiveUser ~ .tta.disabledOnUserAction,
.trH:not(:hover).tt.disabledOnUserAction, .trH:not(:hover):not(.tt) > .tt.disabledOnUserAction, .trH:not(:hover):not(.tt) .ttd.disabledOnUserAction, .trH:not(:hover) ~ .tta.disabledOnUserAction,
.trF:not(:focus).tt.disabledOnUserAction, .trF:not(:focus):not(.tt) > .tt.disabledOnUserAction, .trF:not(:focus):not(.tt) .ttd.disabledOnUserAction, .trF:not(:focus) ~ .tta.disabledOnUserAction,
.trFW:not(:focus-within).tt.disabledOnUserAction, .trFW:not(:focus-within):not(.tt) > .tt.disabledOnUserAction, .trFW:not(:focus-within):not(.tt) .ttd.disabledOnUserAction, .trFW:not(:focus-within) ~ .tta.disabledOnUserAction,
.trA:not(.active).tt.disabledOnUserAction, .trA:not(.active):not(.tt) > .tt.disabledOnUserAction, .trA:not(.active):not(.tt) .ttd.disabledOnUserAction, .trA:not(.active) ~ .tta.disabledOnUserAction {
  pointer-events: none; }

.center {
  display: flex;
  align-items: center;
  justify-content: center; }

.textRight {
  text-align: right; }

.textLeft {
  text-align: left; }

.textCenter {
  text-align: center; }

.noTextSelection, label {
  -webkit-user-select: none;
  /* Chrome all / Safari all */
  -moz-user-select: none;
  /* Firefox all */
  -ms-user-select: none;
  /* IE 10+ */
  user-select: none;
  /* Likely future */ }

.inlineTextWithDots {
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  display: block; }

.marginBottom {
  margin-bottom: 10px; }

.marginTop {
  margin-top: 10px; }

.marginLeft {
  margin-left: 10px; }

.marginRight {
  margin-right: 10px; }

.perspective {
  perspective: 3px; }

.paralax {
  transform: translateZ(-1px) scale(1.47);
  z-index: -1;
  position: relative; }
